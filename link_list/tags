!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ERROR	common.h	4;"	d
ElemType	link_list.h	/^typedef int ElemType;$/;"	t
FALSE	common.h	2;"	d
INFEASIBLE	common.h	5;"	d
LinkList	link_list.h	/^typedef node* LinkList;$/;"	t
OK	common.h	3;"	d
OVERLOW	common.h	6;"	d
Status	common.h	/^typedef int Status;$/;"	t
TRUE	common.h	1;"	d
clearList	Source.cpp	/^void clearList(LinkList *L){$/;"	f
data	link_list.h	/^	ElemType data;$/;"	m	struct:node
deleteFirstList	Source.cpp	/^ElemType deleteFirstList(LinkList *L){$/;"	f
deleteLastList	Source.cpp	/^ElemType deleteLastList(LinkList *L){$/;"	f
deletePosList	Source.cpp	/^ElemType deletePosList(LinkList *L, int pos){$/;"	f
deleteValueList	Source.cpp	/^int deleteValueList(LinkList *L, ElemType e){$/;"	f
emptyList	Source.cpp	/^int emptyList(LinkList *L){$/;"	f
findList	Source.cpp	/^ElemType* findList(LinkList *L, ElemType e){$/;"	f
getElem	Source.cpp	/^ElemType getElem(LinkList L, int pos){$/;"	f
initList	Source.cpp	/^void initList(LinkList *L){$/;"	f
insertFirstList	Source.cpp	/^void insertFirstList(LinkList *L, ElemType e){$/;"	f
insertLastList	Source.cpp	/^void insertLastList(LinkList *L, ElemType e){$/;"	f
insertOrderList	Source.cpp	/^void insertOrderList(LinkList *L, ElemType e){$/;"	f
insertPosList	Source.cpp	/^int insertPosList(LinkList *L, int pos, ElemType e){$/;"	f
main	Source.cpp	/^int main(){$/;"	f
next	link_list.h	/^	struct node * next;$/;"	m	struct:node	typeref:struct:node::node
node	link_list.h	/^struct node$/;"	s
sizeList	Source.cpp	/^int sizeList(LinkList *L){$/;"	f
test	Source.cpp	/^void test(node** L){$/;"	f
traverseList	Source.cpp	/^void traverseList(LinkList *L){$/;"	f
updateList	Source.cpp	/^int updateList(LinkList *L, int pos, ElemType e){$/;"	f
